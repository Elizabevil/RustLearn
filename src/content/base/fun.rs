fn add_with_extra(x: i32, y: i32) -> i32 {
    let x = x + 1; // 语句
    let y = y + 5; // 语句
    x + y // 表达式
}

fn sss() {
    let y = {
        let x = 3;
        x + 1 //最后一行是表达式,返回值，表达式不能包含分号
        //表达式如果不返回任何值，会隐式地返回一个 ()
    };

    println!("The value of y is: {}", y);
}


// 函数名和变量名使用蛇形命名法(snake case)，例如 fn add_two() -> {}
// 函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可
// 每个函数参数都需要标注类型
// 用最后一条表达式来返回一个值
fn add(i: i32, j: i32) -> i32 {
    i + j
}


// 永不返回的发散函数! 当用 ! 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：
fn dead_end() -> ! {
    panic!("你已经到了穷途末路，崩溃吧！");
}
